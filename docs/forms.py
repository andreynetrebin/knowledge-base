from django import forms
from .models import Article, Category, Tag, ArticleVersion
from mdeditor.fields import MDTextFormField
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from django.core.exceptions import ValidationError


class ArticleForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)"""

    class Meta:
        model = Article
        fields = ['title', 'category', 'status', 'tags']
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Django –ø—Ä–æ–µ–∫—Ç'
            }),
            'category': forms.Select(attrs={'class': 'form-control'}),
            'status': forms.Select(attrs={'class': 'form-control'}),
            'tags': forms.SelectMultiple(attrs={
                'class': 'form-control',
                'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏...'
            }),
        }
        help_texts = {
            'title': '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
            'category': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
            'status': '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤–∏–¥–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
        }

    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request', None)
        super().__init__(*args, **kwargs)
        self.fields['category'].queryset = Category.objects.all()
        self.fields['category'].empty_label = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        self.fields['tags'].queryset = Tag.objects.all()

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.request and not self.request.user.is_superuser:
            self.fields['status'].choices = [
                ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
                ('published', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'),
            ]


class ArticleVersionForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏"""
    content = MDTextFormField(
        label='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏',
        help_text='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.'
    )

    class Meta:
        model = ArticleVersion
        fields = ['title', 'content', 'excerpt', 'change_reason', 'is_draft']
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏'
            }),
            'excerpt': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –æ —á–µ–º —ç—Ç–∞ —Å—Ç–∞—Ç—å—è...'
            }),
            'change_reason': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–ù–∞–ø—Ä–∏–º–µ—Ä: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...'
            }),
            'is_draft': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }
        help_texts = {
            'change_reason': '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏',
            'is_draft': '–ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, –≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫',
        }


class ArticleCreateForm(forms.ModelForm):
    """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –∏ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏"""
    # –ü–æ–ª—è –∏–∑ ArticleVersion
    content = MDTextFormField(
        label='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏',
        help_text='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.'
    )
    excerpt = forms.CharField(
        required=False,
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 3,
            'placeholder': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –æ —á–µ–º —ç—Ç–∞ —Å—Ç–∞—Ç—å—è...'
        }),
        help_text='–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏'
    )
    change_reason = forms.CharField(
        required=False,
        max_length=500,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞—Ç—å–∏...'
        }),
        help_text='–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∞ –≤–µ—Ä—Å–∏—è'
    )

    # –ü–æ–ª–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
    new_tags = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control mt-2',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é...',
            'id': 'new-tags-input'
        }),
        help_text='üî∏ –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏'
    )

    class Meta:
        model = Article
        fields = ['title', 'category', 'status', 'tags']
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Django –ø—Ä–æ–µ–∫—Ç'
            }),
            'category': forms.Select(attrs={'class': 'form-control'}),
            'status': forms.Select(attrs={'class': 'form-control'}),
            'tags': forms.SelectMultiple(attrs={
                'class': 'form-control',
                'data-placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏...',
                'id': 'tags-select'
            }),
        }
        help_texts = {
            'title': '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
            'category': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
            'status': '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤–∏–¥–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
        }

    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request', None)
        super().__init__(*args, **kwargs)
        self.fields['category'].queryset = Category.objects.all()
        self.fields['category'].empty_label = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        self.fields['tags'].queryset = Tag.objects.all()

        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        if self.request and not self.request.user.is_superuser:
            self.fields['status'].choices = [
                ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
                ('published', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'),
            ]

    def clean_new_tags(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤"""
        new_tags = self.cleaned_data.get('new_tags', '').strip()
        if not new_tags:
            return []

        tags_list = [tag.strip() for tag in new_tags.split(',') if tag.strip()]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
        for tag in tags_list:
            if len(tag) > 50:
                raise ValidationError(f'–¢–µ–≥ "{tag}" —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)')
            if len(tag) < 2:
                raise ValidationError(f'–¢–µ–≥ "{tag}" —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)')

        return tags_list

    def save(self, commit=True):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ —Ç–µ–≥–æ–≤
        article = super().save(commit=False)

        if commit:
            article.save()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
            self.save_m2m()

            # –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏
            new_tags = self.cleaned_data.get('new_tags', [])
            created_tags = []
            for tag_name in new_tags:
                # –°–æ–∑–¥–∞–µ–º slug –¥–ª—è —Ç–µ–≥–∞
                from django.utils.text import slugify
                tag_slug = slugify(tag_name)

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–≥
                tag, created = Tag.objects.get_or_create(
                    name=tag_name,
                    defaults={'slug': tag_slug}
                )
                article.tags.add(tag)
                if created:
                    created_tags.append(tag_name)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å M2M
            article.save()

        return article

class ArticleUpdateForm(forms.ModelForm):
    """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏"""
    # –ü–æ–ª—è –∏–∑ ArticleVersion
    content = MDTextFormField(
        label='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏'
    )
    excerpt = forms.CharField(
        required=False,
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 3
        })
    )
    change_reason = forms.CharField(
        required=False,
        max_length=500,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏...'
        })
    )

    class Meta:
        model = Article
        fields = ['category', 'status', 'tags']

    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request', None)
        super().__init__(*args, **kwargs)

        # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
        if self.instance and self.instance.current_version:
            current_version = self.instance.current_version
            self.fields['content'].initial = current_version.content
            self.fields['excerpt'].initial = current_version.excerpt

        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        if self.request and not self.request.user.is_superuser:
            self.fields['status'].choices = [
                ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
                ('published', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'),
            ]


# UserRegisterForm –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
class UserRegisterForm(UserCreationForm):
    email = forms.EmailField(
        required=True,
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email'
        })
    )

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']
        widgets = {
            'username': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }),
        }

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if User.objects.filter(email=email).exists():
            raise ValidationError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return email

    def clean_username(self):
        username = self.cleaned_data.get('username')
        if User.objects.filter(username=username).exists():
            raise ValidationError('–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ')
        return username
