from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.urls import reverse
from mptt.models import MPTTModel, TreeForeignKey
from mdeditor.fields import MDTextField
from django.utils import timezone
from django.core.exceptions import ValidationError
import uuid


class Tag(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–≥–æ–≤ —Å—Ç–∞—Ç–µ–π"""
    name = models.CharField(max_length=50, unique=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    slug = models.SlugField(max_length=50, unique=True, verbose_name='URL-—Ç–µ–≥')
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')

    class Meta:
        verbose_name = '–¢–µ–≥'
        verbose_name_plural = '–¢–µ–≥–∏'
        ordering = ['name']

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('docs:tag_articles', kwargs={'slug': self.slug})

    def article_count(self):
        return self.articles.filter(status='published').count()


class Category(MPTTModel):
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    slug = models.SlugField(unique=True, verbose_name="URL")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    parent = TreeForeignKey('self', on_delete=models.CASCADE,
                            null=True, blank=True, related_name='children')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class MPTTMeta:
        order_insertion_by = ['name']

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('docs:category_articles', kwargs={'slug': self.slug})


class Article(models.Model):
    title = models.CharField(max_length=200, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    slug = models.SlugField(unique=True, verbose_name="URL")
    content = MDTextField(verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    excerpt = models.TextField(blank=True, verbose_name="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")

    author = models.ForeignKey(User, on_delete=models.CASCADE,
                               related_name='articles', verbose_name="–ê–≤—Ç–æ—Ä")
    category = models.ForeignKey(Category, on_delete=models.CASCADE,
                                 related_name='articles', verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")

    STATUS_CHOICES = [
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('published', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'),
        ('archived', '–í –∞—Ä—Ö–∏–≤–µ'),
    ]
    status = models.CharField(max_length=10, choices=STATUS_CHOICES,
                              default='draft', verbose_name="–°—Ç–∞—Ç—É—Å")

    view_count = models.PositiveIntegerField(default=0, verbose_name="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
    is_pinned = models.BooleanField(default=False, verbose_name="–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ")

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    published_at = models.DateTimeField(null=True, blank=True, verbose_name="–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    tags = models.ManyToManyField(Tag, blank=True, related_name='articles', verbose_name='–¢–µ–≥–∏')
    comments = models.ManyToManyField(
        User,
        through='Comment',
        through_fields=('article', 'author'),
        related_name='article_comments'
    )

    class Meta:
        verbose_name = "–°—Ç–∞—Ç—å—è"
        verbose_name_plural = "–°—Ç–∞—Ç—å–∏"
        ordering = ['-created_at']

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
            # –î–æ–±–∞–≤–ª—è–µ–º UUID –µ—Å–ª–∏ slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if Article.objects.filter(slug=self.slug).exists():
                self.slug = f"{self.slug}-{uuid.uuid4().hex[:8]}"

        if self.status == 'published' and not self.published_at:
            from django.utils import timezone
            self.published_at = timezone.now()

        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('docs:article_detail', kwargs={'slug': self.slug})

    def increment_view_count(self):
        self.view_count += 1
        self.save(update_fields=['view_count'])

    def get_comment_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å—Ç–∞—Ç—å–µ"""
        return self.comments_article.count()

    def get_like_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —Å—Ç–∞—Ç—å–∏"""
        return self.ratings.filter(rating_type='like').count()

    def get_dislike_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ —Å—Ç–∞—Ç—å–∏"""
        return self.ratings.filter(rating_type='dislike').count()

    def get_user_rating(self, user):
        """–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏"""
        if user.is_authenticated:
            rating = self.ratings.filter(user=user).first()
            return rating.rating_type if rating else None
        return None


class Comment(MPTTModel):
    article = models.ForeignKey(
        Article,
        on_delete=models.CASCADE,
        related_name='comments_article',
        verbose_name='–°—Ç–∞—Ç—å—è'
    )
    author = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='comments_authored',
        verbose_name='–ê–≤—Ç–æ—Ä'
    )
    parent = TreeForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='children',
        verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
    )
    content = models.TextField(max_length=1000, verbose_name='–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
    is_edited = models.BooleanField(default=False, verbose_name='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª—Å—è')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')

    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    is_approved = models.BooleanField(default=True, verbose_name='–û–¥–æ–±—Ä–µ–Ω')
    is_deleted = models.BooleanField(default=False, verbose_name='–£–¥–∞–ª–µ–Ω')

    class MPTTMeta:
        order_insertion_by = ['created_at']

    class Meta:
        verbose_name = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        verbose_name_plural = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['article', 'is_approved', 'is_deleted']),
            models.Index(fields=['author', 'created_at']),
        ]

    def __str__(self):
        return f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {self.author.username} –∫ "{self.article.title}"'

    def save(self, *args, **kwargs):
        if self.pk:
            self.is_edited = True
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return f"{self.article.get_absolute_url()}#comment-{self.pk}"

    def can_edit(self, user):
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        return user == self.author or user.is_staff

    def can_delete(self, user):
        """–ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        return user == self.author or user.is_staff


# –ú–û–î–ï–õ–¨ –û–¶–ï–ù–û–ö (–õ–ê–ô–ö–ò/–î–ò–ó–õ–ê–ô–ö–ò)
class Rating(models.Model):
    RATING_TYPES = [
        ('like', 'üëç –ù—Ä–∞–≤–∏—Ç—Å—è'),
        ('dislike', 'üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è'),
    ]

    article = models.ForeignKey(
        Article,
        on_delete=models.CASCADE,
        related_name='ratings',
        verbose_name='–°—Ç–∞—Ç—å—è'
    )
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='ratings_given',
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    rating_type = models.CharField(
        max_length=10,
        choices=RATING_TYPES,
        verbose_name='–¢–∏–ø –æ—Ü–µ–Ω–∫–∏'
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏')

    class Meta:
        verbose_name = '–û—Ü–µ–Ω–∫–∞'
        verbose_name_plural = '–û—Ü–µ–Ω–∫–∏'
        unique_together = ['article', 'user']  # –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é
        indexes = [
            models.Index(fields=['article', 'rating_type']),
            models.Index(fields=['user', 'created_at']),
        ]

    def __str__(self):
        return f'{self.user.username} - {self.get_rating_type_display()} - {self.article.title}'

    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Å—Ç–∞—Ç—å–∏"""
        if self.article.author == self.user:
            raise ValidationError('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏')


# –ú–û–î–ï–õ–¨ –ò–ó–ë–†–ê–ù–ù–´–• –°–¢–ê–¢–ï–ô
class Favorite(models.Model):
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='favorites',
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    article = models.ForeignKey(
        Article,
        on_delete=models.CASCADE,
        related_name='favorited_by',
        verbose_name='–°—Ç–∞—Ç—å—è'
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')

    class Meta:
        verbose_name = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'
        verbose_name_plural = '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ'
        unique_together = ['user', 'article']  # –û–¥–Ω–∞ —Å—Ç–∞—Ç—å—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        indexes = [
            models.Index(fields=['user', 'created_at']),
        ]

    def __str__(self):
        return f'{self.user.username} - {self.article.title}'
