from django.contrib import admin
from django.contrib.auth.models import User
from django.contrib.auth.admin import UserAdmin
from django.utils.html import format_html
from .models import Article, Category, Tag
from django.utils import timezone
from django import forms
from mdeditor.fields import MDTextFormField


# –§–æ—Ä–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —Å MDEditor
class ArticleAdminForm(forms.ModelForm):
    content = MDTextFormField()

    class Meta:
        model = Article
        fields = '__all__'


@admin.register(Tag)
class TagAdmin(admin.ModelAdmin):
    list_display = ['name', 'slug', 'article_count', 'created_at']
    list_filter = ['created_at']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ['created_at']

    def article_count(self, obj):
        return obj.article_count()
    article_count.short_description = '–ö–æ–ª-–≤–æ —Å—Ç–∞—Ç–µ–π'

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'slug', 'parent', 'article_count', 'created_at']
    list_filter = ['created_at', 'parent']
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ['created_at', 'updated_at']

    def article_count(self, obj):
        return obj.articles.count()

    article_count.short_description = '–ö–æ–ª-–≤–æ —Å—Ç–∞—Ç–µ–π'

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'slug', 'parent', 'description')
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )




@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    form = ArticleAdminForm  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ–æ—Ä–º—É
    list_display = ['title', 'author', 'category', 'status', 'view_count',
                    'created_at', 'published_at', 'preview_link']
    list_filter = ['status', 'category', 'tags', 'created_at', 'published_at']
    search_fields = ['title', 'content', 'excerpt', 'author__username', 'tags__name']
    list_editable = ['status']
    readonly_fields = ['created_at', 'updated_at', 'published_at', 'view_count']
    prepopulated_fields = {'slug': ('title',)}
    date_hierarchy = 'created_at'
    filter_horizontal = ['tags']  # –£–¥–æ–±–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤

    # –ü–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'author', 'category', 'excerpt')
        }),
        ('–¢–µ–≥–∏', {
            'fields': ('tags',)
        }),
        ('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', {
            'fields': ('content',)
        }),
        ('–°—Ç–∞—Ç—É—Å –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å', {
            'fields': ('status', 'is_pinned', 'view_count')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('created_at', 'updated_at', 'published_at'),
            'classes': ('collapse',)
        }),
    )

    def preview_link(self, obj):
        if obj.status == 'published' and obj.slug:
            return format_html(
                '<a href="/articles/{}/" target="_blank" class="button">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</a>',
                obj.slug
            )
        return '‚Äî'

    preview_link.short_description = '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä'

    # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏
    def save_model(self, request, obj, form, change):
        if not change:  # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
            obj.author = request.user
        super().save_model(request, obj, form, change)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è –Ω–µ-—Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if request.user.is_superuser:
            return qs
        return qs.filter(author=request.user)

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "author" and not request.user.is_superuser:
            kwargs["queryset"] = User.objects.filter(id=request.user.id)
        return super().formfield_for_foreignkey(db_field, request, **kwargs)

    actions = ['make_published', 'make_draft', 'make_archived']

    def make_published(self, request, queryset):
        updated = queryset.update(status='published', published_at=timezone.now())
        self.message_user(request, f'{updated} —Å—Ç–∞—Ç–µ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')

    make_published.short_description = '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏'

    def make_draft(self, request, queryset):
        updated = queryset.update(status='draft')
        self.message_user(request, f'{updated} —Å—Ç–∞—Ç–µ–π –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏')

    make_draft.short_description = '–í —á–µ—Ä–Ω–æ–≤–∏–∫–∏'

    def make_archived(self, request, queryset):
        updated = queryset.update(status='archived')
        self.message_user(request, f'{updated} —Å—Ç–∞—Ç–µ–π –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ')

    make_archived.short_description = '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å'

# –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
class CustomUserAdmin(UserAdmin):
    list_display = ['username', 'email', 'first_name', 'last_name',
                    'is_staff', 'article_count', 'date_joined']
    list_filter = ['is_staff', 'is_superuser', 'is_active', 'date_joined']

    def article_count(self, obj):
        return obj.articles.count()

    article_count.short_description = '–°—Ç–∞—Ç–µ–π'


# –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º User —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–¥–º–∏–Ω–∫–æ–π
admin.site.unregister(User)
admin.site.register(User, CustomUserAdmin)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin.site.site_header = '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π'
admin.site.site_title = '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'
admin.site.index_title = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'


class PublishedFilter(admin.SimpleListFilter):
    title = '–°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
    parameter_name = 'publish_status'

    def lookups(self, request, model_admin):
        return (
            ('published', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ'),
            ('unpublished', '–ù–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ'),
            ('recent', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π'),
        )

    def queryset(self, request, queryset):
        if self.value() == 'published':
            return queryset.filter(status='published')
        elif self.value() == 'unpublished':
            return queryset.exclude(status='published')
        elif self.value() == 'recent':
            return queryset.filter(
                status='published',
                published_at__gte=timezone.now() - timezone.timedelta(days=7)
            )

# # –ï—Å–ª–∏ –±—É–¥—É—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
# class CommentInline(admin.TabularInline):
#     model = Comment  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –º–æ–¥–µ–ª—å
#     extra = 0
#     readonly_fields = ['created_at']